theme(plot.title=element_text(color=color.title, size=15, vjust=1.25,face="bold", family="Hack")) +
theme(axis.text.x=element_text(size=15,color=color.axis.text)) +
theme(axis.text.y=element_text(size=15,color=color.axis.text)) +
theme(axis.title.x=element_text(size=10,color=color.axis.title, vjust=0, face="bold", family= "Hack")) +
theme(axis.title.y=element_text(size=10,color=color.axis.title, vjust=1.25, face="bold", family = "Hack")) +
theme(strip.text.y = element_text(size = 8, colour = "black", face="bold", family = "Hack")) +
theme(strip.background = element_rect(fill=color.background, color=color.background, size=1)) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
ggplot(newMPG, aes(x=reorder(class, +total), total)) + coord_flip()+ geom_bar(fill = "#6f00ff", stat="identity") +
labs(title = "Count of Car Classes", x = "Car Class", y = "Count")+
geom_text(aes(y=total - 1, label=total), position = position_dodge(.09), vjust= .5, size = 3, hjust = 1.3, fontface= "bold", family = "Hack")+
my_theme()
my_theme <- function() {
# Generate the colors for the chart procedurally with RColorBrewer
palette <- brewer.pal("Greys", n=9)
color.background = palette[2]
color.grid.major = palette[3]
color.axis.text = palette[6]
color.axis.title = palette[7]
color.title = palette[9]
# Begin construction of chart
theme_bw(base_size=9) +
# Set the entire chart region to a light gray color
theme(panel.background=element_rect(fill=color.background, color=color.background)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color=color.background)) +
# Format the grid
theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +
theme(panel.grid.minor=element_blank()) +
theme(axis.ticks=element_blank()) +
# Format the legend, but hide by default
theme(legend.position="none") +
theme(legend.background = element_rect(fill=color.background)) +
theme(legend.text = element_text(size=7,color=color.axis.title)) +
# Set title and axis labels, and format these and tick marks
theme(plot.title=element_text(color=color.title, size=15, vjust=1.25,face="bold", family="Hack")) +
theme(axis.text.x=element_text(size=10,color=color.axis.text)) +
theme(axis.text.y=element_text(size=10,color=color.axis.text)) +
theme(axis.title.x=element_text(size=10,color=color.axis.title, vjust=0, face="bold", family= "Hack")) +
theme(axis.title.y=element_text(size=10,color=color.axis.title, vjust=1.25, face="bold", family = "Hack")) +
theme(strip.text.y = element_text(size = 10, colour = "black", face="bold", family = "Hack")) +
theme(strip.background = element_rect(fill=color.background, color=color.background, size=1)) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
ggplot(newMPG, aes(x=reorder(class, +total), total)) + coord_flip()+ geom_bar(fill = "#6f00ff", stat="identity") +
labs(title = "Count of Car Classes", x = "Car Class", y = "Count")+
geom_text(aes(y=total - 1, label=total), position = position_dodge(.09), vjust= .5, size = 3, hjust = 1.3, fontface= "bold", family = "Hack")+
my_theme()
install.packages(c("boot", "cluster", "curl", "ggthemes", "gridExtra", "lubridate", "Matrix", "mgcv", "nlme", "nnet", "survival"))
install.packages("highcharter")
install.packages("viridisLite")
library("dplyr")
library("viridisLite")
library("rcharter")
library("highcharter")
data("USArrests", package = "datasets")
data("usgeojson")
USArrests <- USArrests %>%
mutate(state = rownames(.))
n <- 4
colstops <- data.frame(q = 0:n/n,
c = substring(viridis(n + 1, option = "A"), 0, 7)) %>%
list.parse2()
highchart() %>%
hc_title(text = "Violent Crime Rates by US State") %>%
hc_subtitle(text = "Source: USArrests data") %>%
hc_add_series_map(usgeojson, USArrests, name = "Murder arrests (per 100,000)",
value = "Murder", joinBy = c("woename", "state"),
dataLabels = list(enabled = TRUE,
format = '{point.properties.postalcode}')) %>%
hc_colorAxis(stops = colstops) %>%
hc_legend(valueDecimals = 0, valueSuffix = "%") %>%
hc_mapNavigation(enabled = TRUE)
devtools::install_github("rstudio/flexdashboard")
```
d3heatmap(nba_players, scale = "column")
library(knitr)
library(d3heatmap)
library(flexdashboard)
url <- "http://datasets.flowingdata.com/ppg2008.csv"
nba_players <- read.csv(url, row.names = 1)
d3heatmap(nba_players, scale = "column")
install.packages("d3heatmap")
d3heatmap(nba_players, scale = "column")
library(d3heatmap)
d3heatmap(nba_players, scale = "column")
knitr::kable(nba_players[1:20,c("G", "MIN", "PTS")])
library(flexdashboard)
# Chunk 1
d3heatmap(nba_players, scale = "column")
# Chunk 2
knitr::kable(nba_players[1:20,c("G", "MIN", "PTS")])
install.packages(c("BH", "DBI", "git2r", "Matrix", "nlme", "openssl", "Rcpp", "rsconnect", "survival", "zoo"))
install.packages(c("BH", "DBI", "git2r", "Matrix", "nlme", "openssl",
install.packages("acs")
install.packages(c("BH", "DBI", "git2r", "Matrix", "nlme", "openssl", "Rcpp", "rsconnect", "survival", "zoo"))
install.packages(c("BH", "DBI", "git2r", "Matrix", "nlme", "openssl",
install.packages(c("flexdashboard", "GGally", "git2r", "jsonlite", "Matrix", "nlme", "openssl", "plotly", "Rttf2pt1", "stringi", "survival", "zoo"))
install.packages(c("dendextend", "devtools", "dplyr", "geosphere", "GGally", "httr", "jsonlite", "lazyeval", "plyr", "purrr", "tidyr", "withr"))
install.packages(c("curl", "maps"))
library("highcharter", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
hchart(diamonds$price, color = "#B71C1C", name = "Price") %>%
hc_title(text = "You can zoom me")
diamonds
library(ggplot2)
hchart(diamonds$price, color = "#B71C1C", name = "Price") %>%
hc_title(text = "You can zoom me")
install.packages(c("curl", "DBI", "foreign", "irlba", "jsonlite", "lattice", "lubridate", "mgcv", "packrat", "psych", "Rcpp", "rgeos", "RgoogleMaps", "shiny"))
devtools::install_github("crosstalk", "rstudio")
install.packages("irlba")
library('crosstalk')
&#96;``
library(htmltools)
library(crosstalk)
library(leaflet)
library(DT)
# Wrap data frame in SharedData
sd <- SharedData$new(quakes)
filter_slider("mag", "Magnitude", sd, column = ~mag, step = 0.1)
leaflet(sd) %>% addTiles() %>% addMarkers()
datatable(sd)
devtools::install_github("ropensci/plotly@joe/feature/crosstalk")
devtools::install_github("ropensci/plotly@joe/feature/crosstalk")
library(crosstalk)
library(leaflet)
sd <- SharedData$new(quakes)
leaflet(sd) %>% addMarkers()
leaflet(sd) %>% addMarkers()
sd <- SharedData$new(quakes)
leaflet(sd) %>% addMarkers()
library(leaflet)
sd <- SharedData$new(quakes)
leaflet(sd) %>% addMarkers()
detach("package:crosstalk", unload=TRUE)
remove.packages("crosstalk")
devtools::install_github("rstudio/leaflet@joe/feature/crosstalk-filter")
warnings()
install.packages("cluster")
install_github("ramnathv/rChartsCalmap")
devtools::install_github("ramnathv/rChartsCalmap")
dat <- read.csv('http://t.co/mN2RgcyQFc')[,c('date', 'pts')]
library(rChartsCalmap)
r1 <- calheatmap(x = 'date', y = 'pts',
data = dat,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
r1
library(quantmod)
getSymbols("AAPL")
xts_to_df <- function(xt){
data.frame(
date = format(as.Date(index(xt)), '%Y-%m-%d'),
coredata(xt)
)
}
dat = xts_to_df(AAPL)
calheatmap('date', 'AAPL.Adjusted',
data = dat,
domain = 'month',
legend = seq(500, 700, 40),
start = '2014-01-01',
itemName = '$$'
)
library("rChartsCalmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(quantmod)
getSymbols("AAPL")
xts_to_df <- function(xt){
data.frame(
date = format(as.Date(index(xt)), '%Y-%m-%d'),
coredata(xt)
)
}
dat = xts_to_df(AAPL)
calheatmap('date', 'AAPL.Adjusted',
data = dat,
domain = 'month',
legend = seq(500, 700, 40),
start = '2014-01-01',
itemName = '$$'
)
library(quantmod)
getSymbols("AAPL")
xts_to_df <- function(xt){
data.frame(
date = format(as.Date(index(xt)), '%Y-%m-%d'),
coredata(xt)
)
}
dat = xts_to_df(AAPL)
calheatmap('date', 'AAPL.Adjusted',
data = dat,
domain = 'month',
legend = seq(500, 700, 40),
start = '2014-01-01',
itemName = '$$'
)
devtools::install_github("yutannihilation/chartist")
set.seed(324)
data <- data.frame(
day = paste0("day", 1:10),
A   = runif(10, 0, 10),
B   = runif(10, 0, 10),
C   = runif(10, 0, 10)
)
# NSE version
chartist(data, day)
library("chartist", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
set.seed(324)
data <- data.frame(
day = paste0("day", 1:10),
A   = runif(10, 0, 10),
B   = runif(10, 0, 10),
C   = runif(10, 0, 10)
)
# NSE version
chartist(data, day)
devtools::install_github("garthtarr/pairsD3")
data(iris)
require(pairsD3)
pairsD3(iris[,1:4],group=iris[,5])
devtools::install_github("hrbrmstr/streamgraph")
library(dplyr)
library(babynames)
library(streamgraph)
babynames %>%
filter(grepl("^Kr", name)) %>%
group_by(year, name) %>%
tally(wt=n) %>%
streamgraph("name", "n", "year")
install.packages("babynames")
library(babynames)
library(streamgraph)
babynames %>%
filter(grepl("^Jow", name)) %>%
group_by(year, name) %>%
tally(wt=n) %>%
streamgraph("name", "n", "year")
babynames %>%
filter(grepl("^Jo", name)) %>%
group_by(year, name) %>%
tally(wt=n) %>%
streamgraph("name", "n", "year")
babynames %>%
filter(grepl("^Kr", name)) %>%
group_by(year, name) %>%
tally(wt=n) %>%
streamgraph("name", "n", "year")
library(dplyr)
library(babynames)
library(streamgraph)
babynames %>%
filter(grepl("^I", name)) %>%
group_by(year, name) %>%
tally(wt=n) %>%
streamgraph("name", "n", "year", offset="zero", interpolate="linear") %>%
sg_legend(show=TRUE, label="I- names: ")
babynames
es = babynames %>%
filter(grepl("^I", name))
View(es)
es = babynames %>%
filter(grepl("^Jow", name))
View(es)
View(es)
es = babynames %>%
filter(grepl("^Jow", name))%>%
group_by(year, name)
View(es)
es = babynames %>%
filter(grepl("^Jow", name))%>%
group_by(year, name)%>%
tally(wt=n)
View(es)
babynames %>%
filter(grepl("^Jow", name))%>%
group_by(year, name)%>%
tally(wt=n)%>%
streamgraph("name", "nn", "year", offset="zero", interpolate="linear") %>%
sg_legend(show=TRUE, label="I- names: ")
babynames %>%
filter(grepl("^Kr", name)) %>%
group_by(year, name) %>%
tally(wt=n) %>%
streamgraph("name", "nn", "year")
babynames %>%
filter(grepl("^Jow", name)) %>%
group_by(year, name) %>%
tally(wt=n) %>%
streamgraph("name", "nn", "year")
install.packages("rvest")
library(rvest)
library(dplyr)
raw <- html("https://www.ttb.gov/foia/xls/frl-spirits-producers-and-bottlers.htm")
tableData <- html_nodes(raw, "body > table:nth-child(3) > tbody:nth-child(1)")
html_table()
raw <- html("https://www.ttb.gov/foia/xls/frl-spirits-producers-and-bottlers.htm")
raw <- read_html("https://www.ttb.gov/foia/xls/frl-spirits-producers-and-bottlers.htm")
tableData <- html_nodes(raw, "body > table:nth-child(3) > tbody:nth-child(1)")
html_nodes(raw, "body > table:nth-child(3) > tbody:nth-child(1)") %>%
html_table()
html_nodes(raw, "/x:html/x:body/x:table/x:tbody") %>%
html_table()
raw <- read_html("https://www.ttb.gov/foia/xls/frl-spirits-producers-and-bottlers.htm")
html_nodes(raw, "tbody") %>%
html_table()
html_nodes(raw, xpath="/x:html/x:body/x:table/x:tbody") %>%
html_table()
html_nodes(raw, "DiscoTitleXHTML") %>%
html_table()
html_tag(raw, "table") %>%
html_table()
html_nodes(raw, "body > table:nth-child(3) > tbody:nth-child(1)") %>%
html_table()
raw
html_nodes(raw, "body") %>%
html_table()
html_nodes(raw, "body > table") %>%
html_table()
data = html_nodes(raw, "body > table") %>%
html_table(header=TRUE)
data = as.data.frame(data)
View(data)
install.packages(c("cluster", "codetools", "foreign", "lattice", "Matrix", "mgcv", "survival"))
install.packages("OpenStreetMap")
library(OpenStreetMap)
library(OpenStreetMap)
library(OpenStreetMap)
library(OpenStreetMap)
library(OpenStreetMap)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
devtools::install_github("renkun-ken/formattable")
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(babynames)
library(dplyr)
library(streamgraph)
library(data.table)
library(reshape2)
library(DT)
data_set<- read.csv("names_data.csv")
data_set<- select(data_set, slave_name) %>% distinct(slave_name)
setwd("Desktop/blogs/african_names/")
data_set<- read.csv("names_data.csv")
data_set<- select(data_set, slave_name) %>% distinct(slave_name)
data("babynames")
joined = data_set %>% inner_join(babynames, by = c("slave_name" = "name")) %>% group_by(slave_name, year) %>% summarise(n = sum(n))
ranges = range(joined$n)
completeData<- joined %>% group_by(slave_name) %>% summarise(count = paste(n, collapse = ","))
maxYear = joined %>% group_by(slave_name) %>% slice(which.max(year)) %>% select(year) %>% rename(maxYear = year)
minYear = joined %>% group_by(slave_name) %>% slice(which.min(year)) %>% select(year) %>% rename(minYear = year)
maxVal = joined %>% group_by(slave_name) %>% slice(which.max(n)) %>% select(n) %>% rename(maxCount = n)
minVal = joined %>% group_by(slave_name) %>% slice(which.min(n)) %>% select(n) %>% rename(minCount = n)
completeData=completeData%>% right_join(maxVal, by = "slave_name") %>% right_join(minYear, by = "slave_name") %>% right_join(maxYear, by = "slave_name")
options(DT.options = list(pageLength = 25))
colDefs1 <- list(list(targets = c(1:12), render = JS("function(data, type, full){ return '<span class=spark>' + data + '</span>' }")))
colDefs2 <- list(list(targets = 1, render = JS("function(data, type, full){ return '<span class=spark>' + data + '</span>' }")))
bar_string <- "type: 'bar', barColor: '#FF9966', negBarColor: 'purple', highlightColor: 'black'"
cb_bar = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
bar_string, " }); }"), collapse = "")
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
line_string, ", chartRangeMin: ", ranges[1], ", chartRangeMax: ", ranges[2], " }); }"),
collapse = "")
box_string <- "type: 'box', lineColor: 'black', whiskerColor: 'black', outlierFillColor: 'black', outlierLineColor: 'black', medianColor: 'black', boxFillColor: 'orange', boxLineColor: 'black'"
cb_box1 = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
box_string, " }); }"), collapse = "")
cb_box2 = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
box_string, ", chartRangeMin: ", ranges[1], ", chartRangeMax: ", ranges[2], " }); }"),
collapse = "")
datatable(iris,class = 'table-bordered table-condensed')
datatable(iris, style = 'bootstrap', class = 'table-bordered table-condensed')
datatable(iris, style = 'bootstrap', class = 'table-bordered table-condensed')
datatable(iris, style = 'bootstrap')
iris2 = head(iris, 20)
datatable(iris2, style = 'bootstrap')
datatable(iris2, class = 'responsive')
datatable(iris2, class = 'responsive', style = 'bootstrap')
DT::datatable(iris)
DT::datatable(iris, 'bootstrap')
DT::datatable(iris, style='bootstrap')
datatable(iris2, class = 'cell-border')
datatable(iris2, class = 'cell-border')
datatable(iris2, style = 'bootstrap')
datatable(iris2, style = 'bootstrap', class= "dt[-head|-body]-left")
datatable(iris2, style = 'bootstrap', class= "cell-border")
datatable(iris2, style = 'bootstrap', class= 'table-stripe')
library(DT)
datatable(iris2, style = 'bootstrap', class= 'table-stripe')
datatable(iris2, style = 'bootstrap', class = 'table-bordered')
options(DT.options = list(pageLength = 25))
d1 <- datatable(data.table(completeData), rownames = FALSE, options = list(columnDefs = colDefs2,
fnDrawCallback = cb_bar),
colnames = c('Slave Name', 'Popularity (U.S.) Through 2014', 'Max Year #', 'First Year Appeared', 'Last Year Appeared')) %>%
formatS
d1$dependencies <- append(d1$dependencies, htmlwidgets:::getDependency("sparkline"))
d1
completeData=completeData%>% right_join(maxVal, by = "slave_name") %>% right_join(minYear, by = "slave_name") %>% right_join(maxYear, by = "slave_name")
d1 <- datatable(data.table(completeData), rownames = FALSE, options = list(columnDefs = colDefs2,
fnDrawCallback = cb_bar),
colnames = c('Slave Name', 'Popularity (U.S.) Through 2014', 'Max Year #', 'First Year Appeared', 'Last Year Appeared')) %>%
formatS
colDefs1 <- list(list(targets = c(1:12), render = JS("function(data, type, full){ return '<span class=spark>' + data + '</span>' }")))
colDefs2 <- list(list(targets = 1, render = JS("function(data, type, full){ return '<span class=spark>' + data + '</span>' }")))
bar_string <- "type: 'bar', barColor: '#FF9966', negBarColor: 'purple', highlightColor: 'black'"
cb_bar = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
bar_string, " }); }"), collapse = "")
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
line_string, ", chartRangeMin: ", ranges[1], ", chartRangeMax: ", ranges[2], " }); }"),
collapse = "")
box_string <- "type: 'box', lineColor: 'black', whiskerColor: 'black', outlierFillColor: 'black', outlierLineColor: 'black', medianColor: 'black', boxFillColor: 'orange', boxLineColor: 'black'"
cb_box1 = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
box_string, " }); }"), collapse = "")
cb_box2 = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
box_string, ", chartRangeMin: ", ranges[1], ", chartRangeMax: ", ranges[2], " }); }"),
collapse = "")
d1 <- datatable(data.table(completeData), rownames = FALSE, options = list(columnDefs = colDefs2,
fnDrawCallback = cb_bar),
colnames = c('Slave Name', 'Popularity (U.S.) Through 2014', 'Max Year #', 'First Year Appeared', 'Last Year Appeared')) %>%
formatS
d1 <- datatable(data.table(completeData), rownames = FALSE, options = list(columnDefs = colDefs2,
fnDrawCallback = cb_bar),
colnames = c('Slave Name', 'Popularity (U.S.) Through 2014', 'Max Year #', 'First Year Appeared', 'Last Year Appeared'))
d1$dependencies <- append(d1$dependencies, htmlwidgets:::getDependency("sparkline"))
d1
options(DT.options = list(pageLength = 25))
d1 <- datatable(data.table(completeData), rownames = FALSE, options = list(columnDefs = colDefs2,
fnDrawCallback = cb_bar),
colnames = c('Slave Name', 'Popularity (U.S.) Through 2014', 'Max Year #', 'First Year Appeared', 'Last Year Appeared'))
d1$dependencies <- append(d1$dependencies, htmlwidgets:::getDependency("sparkline"))
d1
library(babynames)
library(dplyr)
library(streamgraph)
library(data.table)
library(reshape2)
library(DT)
data_set<- read.csv("names_data.csv")
library(babynames)
library(dplyr)
library(streamgraph)
library(data.table)
library(reshape2)
library(DT)
data_set<- read.csv("names_data.csv")
data_set<- select(data_set, slave_name) %>% distinct(slave_name)
data("babynames")
joined = data_set %>% inner_join(babynames, by = c("slave_name" = "name")) %>% group_by(slave_name, year) %>% summarise(n = sum(n))
ranges = range(joined$n)
completeData<- joined %>% group_by(slave_name) %>% summarise(count = paste(n, collapse = ","))
maxYear = joined %>% group_by(slave_name) %>% slice(which.max(year)) %>% select(year) %>% rename(maxYear = year)
minYear = joined %>% group_by(slave_name) %>% slice(which.min(year)) %>% select(year) %>% rename(minYear = year)
maxVal = joined %>% group_by(slave_name) %>% slice(which.max(n)) %>% select(n) %>% rename(maxCount = n)
minVal = joined %>% group_by(slave_name) %>% slice(which.min(n)) %>% select(n) %>% rename(minCount = n)
completeData=completeData%>% right_join(maxVal, by = "slave_name") %>% right_join(minYear, by = "slave_name") %>% right_join(maxYear, by = "slave_name")
colDefs1 <- list(list(targets = c(1:12), render = JS("function(data, type, full){ return '<span class=spark>' + data + '</span>' }")))
colDefs2 <- list(list(targets = 1, render = JS("function(data, type, full){ return '<span class=spark>' + data + '</span>' }")))
bar_string <- "type: 'bar', barColor: '#FF9966', negBarColor: 'purple', highlightColor: 'black'"
cb_bar = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
bar_string, " }); }"), collapse = "")
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
line_string, ", chartRangeMin: ", ranges[1], ", chartRangeMax: ", ranges[2], " }); }"),
collapse = "")
box_string <- "type: 'box', lineColor: 'black', whiskerColor: 'black', outlierFillColor: 'black', outlierLineColor: 'black', medianColor: 'black', boxFillColor: 'orange', boxLineColor: 'black'"
cb_box1 = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
box_string, " }); }"), collapse = "")
cb_box2 = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
box_string, ", chartRangeMin: ", ranges[1], ", chartRangeMax: ", ranges[2], " }); }"),
collapse = "")
options(DT.options = list(pageLength = 25))
d1 <- datatable(data.table(completeData), rownames = FALSE, options = list(columnDefs = colDefs2,
fnDrawCallback = cb_bar),
colnames = c('Slave Name', 'Popularity (U.S.) Through 2014', 'Max Year #', 'First Year Appeared', 'Last Year Appeared'))
d1$dependencies <- append(d1$dependencies, htmlwidgets:::getDependency("sparkline"))
d1
iris2 = head(iris, 20)
datatable(iris2, style = 'bootstrap')
library("htmlwidgets", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
datatable(iris2, style = 'bootstrap')
detach("package:htmlwidgets", unload=TRUE)
remove.packages("htmlwidgets")
devtools::install_github('ramnathv/htmlwidgets')
